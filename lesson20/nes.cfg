MEMORY {
#RAM Addresses:
    # Zero page
    ZP: start = $00, size = $100, type = rw, define = yes;
	#note, the c compiler uses about 10-20 zp addresses, and it puts them after yours.
	
	OAM1: start = $0200, size = $0100, define = yes;
	#note, sprites stored here in the RAM
	
	RAM: start = $0300, size = $0400, define = yes;
	#note, I located the c stack at 700-7ff, see below

#INES Header:
    HEADER: start = $0, size = $10, file = %O ,fill = yes;


#ROM Addresses:
	#they are all at $8000, because I will be swapping them into that bank
    PRG0: start = $8000, size = $2000, file = %O ,fill = yes, define = yes;
	PRG1: start = $8000, size = $2000, file = %O ,fill = yes, define = yes;
	PRG2: start = $8000, size = $2000, file = %O ,fill = yes, define = yes;
	PRG3: start = $8000, size = $2000, file = %O ,fill = yes, define = yes;
	PRG4: start = $8000, size = $2000, file = %O ,fill = yes, define = yes;
	PRG5: start = $a000, size = $2000, file = %O ,fill = yes, define = yes;
	PRG6: start = $c000, size = $2000, file = %O ,fill = yes, define = yes;
	PRG7: start = $e000, size = $1ffa, file = %O ,fill = yes, define = yes;

    # Hardware Vectors at end of the ROM
    VECTORS: start = $fffa, size = $6, file = %O, fill = yes;


#1 Bank of 8K CHR ROM
    CHR: start = $0000, size = $10000, file = %O, fill = yes;
}




SEGMENTS {
    HEADER:   load = HEADER,         type = ro;
    CODE0:    load = PRG0,           type = ro,  define = yes;
	CODE1:    load = PRG1,           type = ro,  define = yes;
	CODE2:    load = PRG2,           type = ro,  define = yes;
	CODE3:    load = PRG3,           type = ro,  define = yes;
	CODE4:    load = PRG4,           type = ro,  define = yes;
	CODE5:    load = PRG5,           type = ro,  define = yes;
	CODE6:    load = PRG6,           type = ro,  define = yes;
	STARTUP:  load = PRG7,           type = ro,  define = yes;
	CODE:     load = PRG7,           type = ro,  define = yes;
    VECTORS:  load = VECTORS,        type = ro;
    CHARS:    load = CHR,            type = rw;
	
	INIT:     load = PRG7,            type = ro,  define = yes, optional = yes;
    RODATA:   load = PRG7,            type = ro,  define = yes;
	DATA:     load = PRG7, run = RAM, type = rw,  define = yes;
	
    BSS:      load = RAM,            type = bss, define = yes;
    HEAP:     load = RAM,            type = bss, optional = yes;
    ZEROPAGE: load = ZP,             type = zp;
	#OAM:	  load = OAM1,			 type = bss, define = yes;
	ONCE:     load = PRG7,            type = ro,  define = yes;
}




FEATURES {
    CONDES: segment = INIT,
        type = constructor,
        label = __CONSTRUCTOR_TABLE__,
        count = __CONSTRUCTOR_COUNT__;
    CONDES: segment = RODATA,
        type = destructor,
        label = __DESTRUCTOR_TABLE__,
        count = __DESTRUCTOR_COUNT__;
    CONDES: type = interruptor,
        segment = RODATA,
        label = __INTERRUPTOR_TABLE__,
        count = __INTERRUPTOR_COUNT__;
}




SYMBOLS {
    __STACK_SIZE__: type = weak, value = $0100;      # 1 page stack
	__STACK_START__: type = weak, value = $700;
}

